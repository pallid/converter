stages:
  # - test
  - build

variables:
  BUILD_NAME_LINUX: $CI_PROJECT_NAME-linux64
  BUILD_NAME_WINDOWS: $CI_PROJECT_NAME-windows64

# test:
#   stage: test
#   image: golang:1.18
#   script:
#     - go test -timeout 30s ./... -coverprofile=coverage.out
#     - go tool cover -func=coverage.out   
#   artifacts:
#     paths:
#       - coverage.out
#     expire_in: 1 day  
#   tags:
#     - docker

# spellcheck:
#   stage: test
#   image: node:12-alpine
#   script: 
#     - npm i -g cspell-cli
#     - npm install -g @cspell/dict-ru_ru
#     - cspell-cli -u -c cspell.json "**"
#   tags:
#   - docker
#   #allow_failure: true

build-linux:
  image: golang:1.18
  stage: build
  script:
    # - GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -tags nopie -o $BUILD_NAME_LINUX ./cmd/main.go
    - CGO_LDFLAGS="-lmupdf -lm -lmupdf-third -lfreetype -ljbig2dec -lharfbuzz -ljpeg -lopenjp2 -lz" go build -tags nopie -o $BUILD_NAME_LINUX ./cmd/main.go
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-BUILD_NAME_LINUX"
    paths:
      - $BUILD_NAME_LINUX
  tags:
    - docker

# build-windows:
#   image: golang:1.18
#   stage: build
#   script:
#     # - apt-get install gcc-multilib
#     # - apt-get install gcc-mingw-w64
#     # # - GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build -o $BUILD_NAME_WINDOWS ./cmd/main.go
#     # - GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CXX_FOR_TARGET=i686-w64-mingw32-g++ CC_FOR_TARGET=i686-w64-mingw32-gcc go build -o $BUILD_NAME_WINDOWS ./cmd/main.go
#    - gcc -v
#    - GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go build -tags nopie -o $BUILD_NAME_WINDOWS ./cmd/main.go
#   artifacts:
#     name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-BUILD_NAME_WINDOWS"
#     paths:
#       - $BUILD_NAME_WINDOWS
#   tags:
#     - docker

